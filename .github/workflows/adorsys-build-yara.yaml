name: "Build Yara"

on:
  push:
    branches: ["**"]   # run on ALL branches
    tags: ["v*"]       # also run when tags are pushed (for releases)
  pull_request:

# Cancel older in-progress runs on the same ref to save minutes
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write  # needed for the release job
  actions: read

jobs:
  build:
    name: ${{ matrix.label }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS
          - label: macos-arm64
            os_name: macos
            arch_name: arm64
            runs-on: macos-14
          - label: macos-amd64
            os_name: macos
            arch_name: x86_64
            runs-on: macos-13

          # Ubuntu
          - label: ubuntu-amd64
            os_name: ubuntu
            arch_name: x86_64
            runs-on: ubuntu-24.04
          - label: ubuntu-arm64
            os_name: ubuntu
            arch_name: aarch64
            runs-on: ubuntu-24.04-arm

    runs-on: ${{ matrix.runs-on }}

    steps:
      - name: Checkout (your fork)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0       # so `git describe` and tag info is available
          submodules: false

      # ---------- Dependencies ----------
      - name: Install dependencies (Ubuntu)
        if: startsWith(runner.os, 'Linux')
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential autoconf automake libtool pkg-config git \
            libssl-dev libpcre2-dev libmagic-dev jansson-dev protobuf-c-compiler

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install autoconf automake libtool pkg-config openssl@3 pcre2 libmagic jansson protobuf-c
          # Make Homebrew OpenSSL visible to pkg-config
          echo "PKG_CONFIG_PATH=$(brew --prefix)/opt/openssl@3/lib/pkgconfig:$(brew --prefix)/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV

      # ---------- Build ----------
      - name: Bootstrap & configure
        run: |
          set -euxo pipefail
          ./bootstrap.sh
          ./configure --with-crypto --enable-magic

      - name: Build
        run: |
          set -euxo pipefail
          CORES="$(getconf _NPROCESSORS_ONLN 2>/dev/null || sysctl -n hw.ncpu || echo 2)"
          make -j"$CORES"

      # ---------- Package ----------
      - name: Package binaries
        id: pkg
        run: |
          set -euxo pipefail

          # Derive a nice version string
          if git describe --tags --dirty --always >/dev/null 2>&1; then
            VER="$(git describe --tags --dirty --always)"
          else
            VER="${GITHUB_REF_NAME:-dev}"
          fi

          OS="${{ matrix.os_name }}"
          ARCH="${{ matrix.arch_name }}"

          OUTBASE="yara-${VER}-${OS}-${ARCH}"
          OUTDIR="dist/${OUTBASE}"
          mkdir -p "${OUTDIR}/bin" "${OUTDIR}/licenses"

          # Copy binaries (present after make)
          cp yara yarac "${OUTDIR}/bin/"

          # Include licenses/readme if present
          for f in LICENSE COPYING NOTICE README*; do
            [ -f "$f" ] && cp "$f" "${OUTDIR}/licenses/" || true
          done

          # Provenance info
          {
            echo "repo=${{ github.repository }}"
            echo "commit=${{ github.sha }}"
            echo "ref=${{ github.ref }}"
            echo "os=${OS} arch=${ARCH}"
            echo "built_at=$(date -u +%FT%TZ)"
          } > "${OUTDIR}/BUILDINFO"

          # Tarball
          mkdir -p dist/pkg
          tar -czf "dist/pkg/${OUTBASE}.tar.gz" -C dist "${OUTBASE}"

          echo "out_tgz=dist/pkg/${OUTBASE}.tar.gz" >> $GITHUB_OUTPUT
          echo "ver=${VER}" >> $GITHUB_OUTPUT

      - name: Upload artifact (${{ matrix.label }})
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.label }}
          path: ${{ steps.pkg.outputs.out_tgz }}
          if-no-files-found: error
          retention-days: 14

  release:
    # Only runs for tag refs (e.g., refs/tags/v4.5.4-acme.1)
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build]
    runs-on: ubuntu-24.04

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist

      - name: Create GitHub Release (from tag)
        uses: softprops/action-gh-release@v2
        with:
          files: dist/**/yara-*.tar.gz
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
