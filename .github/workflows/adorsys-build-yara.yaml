name: "Build Yara"

on:
  push:
    branches: [ "**" ]   # run on ALL branches
    tags: [ "v*" ]       # also run when tags are pushed (for releases)
  pull_request:

# Cancel older in-progress runs on the same ref to save minutes
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write  # needed for the release job
  actions: read

jobs:
  build:
    name: ${{ matrix.label }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS
          - label: macos-arm64
            os_name: macos
            arch_name: arm64
            runs-on: macos-14
          - label: macos-amd64
            os_name: macos
            arch_name: x86_64
            runs-on: macos-13

          # Ubuntu
          - label: ubuntu-amd64
            os_name: ubuntu
            arch_name: x86_64
            runs-on: ubuntu-24.04
          - label: ubuntu-arm64
            os_name: ubuntu
            arch_name: aarch64
            runs-on: ubuntu-24.04-arm

    runs-on: ${{ matrix.runs-on }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0       # so `git describe` and tag info is available
          submodules: false

      # ---------- Dependencies ----------
      - name: Install dependencies (Ubuntu)
        if: startsWith(runner.os, 'Linux')
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential autoconf automake libtool pkg-config git \
            libssl-dev libpcre2-dev libmagic-dev libjansson-dev protobuf-c-compiler

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          # Ensure all needed libs are present
          brew install autoconf automake libtool pkg-config \
            openssl@3 pcre2 libmagic jansson protobuf-c

          # Point pkg-config + compiler/linker to Homebrew prefixes (keg-only)
          OPENSSL_PREFIX="$(brew --prefix openssl@3)"
          LIBMAGIC_PREFIX="$(brew --prefix libmagic)"
          PCRE2_PREFIX="$(brew --prefix pcre2)"

          {
            echo "PKG_CONFIG_PATH=${OPENSSL_PREFIX}/lib/pkgconfig:${LIBMAGIC_PREFIX}/lib/pkgconfig:${PCRE2_PREFIX}/lib/pkgconfig:${PKG_CONFIG_PATH}"
            echo "CPPFLAGS=-I${OPENSSL_PREFIX}/include -I${LIBMAGIC_PREFIX}/include -I${PCRE2_PREFIX}/include ${CPPFLAGS}"
            echo "LDFLAGS=-L${OPENSSL_PREFIX}/lib -L${LIBMAGIC_PREFIX}/lib -L${PCRE2_PREFIX}/lib ${LDFLAGS}"
          } >> "$GITHUB_ENV"

      # ---------- SBOM tooling (Syft) ----------
      # Pin the Syft version for reproducibility; adjust as you like.
      - name: Install Syft (SBOM generator)
        shell: bash
        run: |
          set -euxo pipefail
          SYFT_VERSION="v1.32.0"
          BIN="$HOME/.local/bin"
          mkdir -p "$BIN"
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b "$BIN" "$SYFT_VERSION"
          echo "$BIN" >> "$GITHUB_PATH"
          export PATH="$BIN:$PATH"
          syft version
      
      # ---------- Build ----------
      - name: Bootstrap
        run: |
          set -euxo pipefail
          ./bootstrap.sh || autoreconf -fi

      - name: Configure
        run: |
          set -euxo pipefail
          ./configure --with-crypto --enable-magic

      - name: Build
        run: |
          set -euxo pipefail
          CORES="$(getconf _NPROCESSORS_ONLN 2>/dev/null || sysctl -n hw.ncpu || echo 2)"
          make -j"$CORES"

      # ---------- Package + SBOM + checksums ----------
      - name: Package binaries + SBOMs
        id: pkg
        run: |
          set -euxo pipefail

          # Derive a nice version string
          if git describe --tags --dirty --always >/dev/null 2>&1; then
            VER="$(git describe --tags --dirty --always)"
          else
            VER="${GITHUB_REF_NAME:-dev}"
          fi

          OS="${{ matrix.os_name }}"
          ARCH="${{ matrix.arch_name }}"

          OUTBASE="yara-${VER}-${OS}-${ARCH}"
          OUTDIR="dist/${OUTBASE}"
          mkdir -p "${OUTDIR}/bin" "${OUTDIR}/licenses"

          # Copy binaries (present after make)
          cp yara yarac "${OUTDIR}/bin/"

          # Include licenses/readme if present
          for f in LICENSE COPYING NOTICE README*; do
            [ -f "$f" ] && cp "$f" "${OUTDIR}/licenses/" || true
          done

          # Provenance info
          {
            echo "repo=${{ github.repository }}"
            echo "commit=${{ github.sha }}"
            echo "ref=${{ github.ref }}"
            echo "os=${OS} arch=${ARCH}"
            echo "built_at=$(date -u +%FT%TZ)"
            echo "sbom_tool=$(syft version | head -n1 || echo syft)"
          } > "${OUTDIR}/BUILDINFO"

          # --- Generate SBOMs for the artifact directory (not the whole workspace) ---
          TMP_SBOM="$(mktemp -d)"
          syft "dir:${OUTDIR}" -o spdx-json      > "${TMP_SBOM}/sbom.spdx.json"
          syft "dir:${OUTDIR}" -o cyclonedx-json > "${TMP_SBOM}/sbom.cdx.json"
          mkdir -p "${OUTDIR}/SBOM"
          mv "${TMP_SBOM}/sbom.spdx.json" "${OUTDIR}/SBOM/"
          mv "${TMP_SBOM}/sbom.cdx.json"  "${OUTDIR}/SBOM/"

          # Also stage SBOMs as separate release assets
          mkdir -p dist/pkg
          cp "${OUTDIR}/SBOM/sbom.spdx.json" "dist/pkg/${OUTBASE}.sbom.spdx.json"
          cp "${OUTDIR}/SBOM/sbom.cdx.json"  "dist/pkg/${OUTBASE}.sbom.cdx.json"

          # Tarball (includes SBOM/ and BUILDINFO)
          tar -czf "dist/pkg/${OUTBASE}.tar.gz" -C dist "${OUTBASE}"

          # Checksums for tarball + SBOMs (portable across macOS/Linux)
          checksum() {
            if command -v sha256sum >/dev/null 2>&1; then
              sha256sum "$1"
            else
              shasum -a 256 "$1"
            fi
          }

          {
            checksum "dist/pkg/${OUTBASE}.tar.gz"
            checksum "dist/pkg/${OUTBASE}.sbom.spdx.json"
            checksum "dist/pkg/${OUTBASE}.sbom.cdx.json"
          } | tee "dist/pkg/${OUTBASE}.sha256.txt"

          echo "tgz=dist/pkg/${OUTBASE}.tar.gz"                 >> $GITHUB_OUTPUT
          echo "spdx=dist/pkg/${OUTBASE}.sbom.spdx.json"        >> $GITHUB_OUTPUT
          echo "cdx=dist/pkg/${OUTBASE}.sbom.cdx.json"          >> $GITHUB_OUTPUT
          echo "checksums=dist/pkg/${OUTBASE}.sha256.txt"       >> $GITHUB_OUTPUT
          echo "ver=${VER}"                                     >> $GITHUB_OUTPUT

      - name: Upload artifacts (${{ matrix.label }})
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.label }}
          path: |
            ${{ steps.pkg.outputs.tgz }}
            ${{ steps.pkg.outputs.spdx }}
            ${{ steps.pkg.outputs.cdx }}
            ${{ steps.pkg.outputs.checksums }}
          if-no-files-found: error
          retention-days: 14

  release:
    # Only runs for tag refs (e.g., refs/tags/v4.5.4-acme.1)
    if: startsWith(github.ref, 'refs/tags/')
    needs: [ build ]
    runs-on: ubuntu-24.04

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v5
        with:
          path: ./dist

      # (Optional) Create a combined checksums file across all artifacts
      - name: Combine checksums
        run: |
          set -eu
          find dist -type f -name '*.sha256.txt' -print0 | sort -z | xargs -0 cat > dist/ALL-CHECKSUMS.sha256.txt
          wc -l dist/ALL-CHECKSUMS.sha256.txt || true

      - name: Create GitHub Release (from tag)
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/**/yara-*.tar.gz
            dist/**/yara-*.sbom.spdx.json
            dist/**/yara-*.sbom.cdx.json
            dist/**/yara-*.sha256.txt
            dist/ALL-CHECKSUMS.sha256.txt
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
