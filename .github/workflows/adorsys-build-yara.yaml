name: "Build Yara"

on:
  push:
    branches: [ "**" ]   # run on ALL branches
    tags: [ "v*" ]       # also run when tags are pushed (for releases)
  pull_request:

# Cancel older in-progress runs on the same ref to save minutes
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write        # build artifacts + releases
  actions: read
  id-token: write        # required for Cosign keyless + provenance attestations
  attestations: write    # required for actions/attest-build-provenance

jobs:
  build:
    name: ${{ matrix.label }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS
          - label: macos-arm64
            os_name: macos
            arch_name: arm64
            runs-on: macos-14
          - label: macos-amd64
            os_name: macos
            arch_name: x86_64
            runs-on: macos-13

          # Ubuntu 24.04
          - label: ubuntu-amd64
            os_name: ubuntu
            arch_name: x86_64
            runs-on: ubuntu-24.04
          - label: ubuntu-arm64
            os_name: ubuntu
            arch_name: aarch64
            runs-on: ubuntu-24.04-arm

          # Ubuntu 22.04
          - label: ubuntu22-amd64
            os_name: ubuntu22
            arch_name: x86_64
            runs-on: ubuntu-22.04

    runs-on: ${{ matrix.runs-on }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0       # so `git describe` and tag info is available
          submodules: false

      # ---------- Dependencies ----------
      - name: Install dependencies (Ubuntu)
        if: startsWith(runner.os, 'Linux')
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential autoconf automake libtool pkg-config git \
            libssl-dev libpcre2-dev libmagic-dev libjansson-dev protobuf-c-compiler

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          # Ensure all needed libs are present
          brew install autoconf automake libtool pkg-config \
            openssl@3 pcre2 libmagic jansson protobuf-c

          # Point pkg-config + compiler/linker to Homebrew prefixes (keg-only)
          OPENSSL_PREFIX="$(brew --prefix openssl@3)"
          LIBMAGIC_PREFIX="$(brew --prefix libmagic)"
          PCRE2_PREFIX="$(brew --prefix pcre2)"

          {
            echo "PKG_CONFIG_PATH=${OPENSSL_PREFIX}/lib/pkgconfig:${LIBMAGIC_PREFIX}/lib/pkgconfig:${PCRE2_PREFIX}/lib/pkgconfig:${PKG_CONFIG_PATH}"
            echo "CPPFLAGS=-I${OPENSSL_PREFIX}/include -I${LIBMAGIC_PREFIX}/include -I${PCRE2_PREFIX}/include ${CPPFLAGS}"
            echo "LDFLAGS=-L${OPENSSL_PREFIX}/lib -L${LIBMAGIC_PREFIX}/lib -L${PCRE2_PREFIX}/lib ${LDFLAGS}"
          } >> "$GITHUB_ENV"

      # ---------- Build ----------
      - name: Bootstrap
        run: |
          set -euxo pipefail
          ./bootstrap.sh || autoreconf -fi

      - name: Configure
        run: |
          set -euxo pipefail
          ./configure --with-crypto --enable-magic

      - name: Build
        run: |
          set -euxo pipefail
          CORES="$(getconf _NPROCESSORS_ONLN 2>/dev/null || sysctl -n hw.ncpu || echo 2)"
          make -j"$CORES"

      # ---------- Stage artifact & metadata ----------
      - name: Stage artifact & metadata
        id: meta
        shell: bash
        run: |
          set -euxo pipefail

          # Version
          if git describe --tags --dirty --always >/dev/null 2>&1; then
            VER="$(git describe --tags --dirty --always)"
          else
            VER="${GITHUB_REF_NAME:-dev}"
          fi

          OS="${{ matrix.os_name }}"
          ARCH="${{ matrix.arch_name }}"

          OUTBASE="yara-${VER}-${OS}-${ARCH}"
          OUTDIR="$GITHUB_WORKSPACE/dist/${OUTBASE}"
          SBOMDIR="${OUTDIR}/SBOM"
          DISTPKG="$GITHUB_WORKSPACE/dist/pkg"

          mkdir -p "${OUTDIR}/bin" "${OUTDIR}/licenses" "${SBOMDIR}" "${DISTPKG}"

          # Copy binaries (present after make)
          cp yara yarac "${OUTDIR}/bin/"

          # Include licenses/readme if present
          for f in LICENSE COPYING NOTICE README*; do
            [ -f "$f" ] && cp "$f" "${OUTDIR}/licenses/" || true
          done

          # Provenance info
          {
            echo "repo=${{ github.repository }}"
            echo "commit=${{ github.sha }}"
            echo "ref=${{ github.ref }}"
            echo "os=${OS} arch=${ARCH}"
            echo "built_at=$(date -u +%FT%TZ)"
            echo "builder=github-actions"
          } > "${OUTDIR}/BUILDINFO"

          # Compute paths and expose as step outputs
          echo "ver=${VER}"                                   >> "$GITHUB_OUTPUT"
          echo "outbase=${OUTBASE}"                           >> "$GITHUB_OUTPUT"
          echo "outdir=${OUTDIR}"                             >> "$GITHUB_OUTPUT"
          echo "spdx_file=${SBOMDIR}/sbom.spdx.json"          >> "$GITHUB_OUTPUT"
          echo "cdx_file=${SBOMDIR}/sbom.cdx.json"            >> "$GITHUB_OUTPUT"
          echo "dist_spdx=${DISTPKG}/${OUTBASE}.sbom.spdx.json" >> "$GITHUB_OUTPUT"
          echo "dist_cdx=${DISTPKG}/${OUTBASE}.sbom.cdx.json"   >> "$GITHUB_OUTPUT"
          echo "tgz=${DISTPKG}/${OUTBASE}.tar.gz"             >> "$GITHUB_OUTPUT"
          echo "checksums=${DISTPKG}/${OUTBASE}.sha256.txt"    >> "$GITHUB_OUTPUT"

      # ---------- SBOMs (via Anchore's sbom-action which wraps Syft) ----------
      - name: Generate SBOM (SPDX)
        uses: anchore/sbom-action@v0
        with:
          path: ${{ steps.meta.outputs.outdir }}
          format: spdx-json
          output-file: ${{ steps.meta.outputs.spdx_file }}
          upload-artifact: false

      - name: Generate SBOM (CycloneDX)
        uses: anchore/sbom-action@v0
        with:
          path: ${{ steps.meta.outputs.outdir }}
          format: cyclonedx-json
          output-file: ${{ steps.meta.outputs.cdx_file }}
          upload-artifact: false

      # ---------- Tar + checksums + separate SBOM copies ----------
      - name: Package and checksum
        id: pkg
        shell: bash
        run: |
          set -euxo pipefail

          # Copy SBOMs to release/CI payload directory too
          cp "${{ steps.meta.outputs.spdx_file }}" "${{ steps.meta.outputs.dist_spdx }}"
          cp "${{ steps.meta.outputs.cdx_file }}"  "${{ steps.meta.outputs.dist_cdx }}"

          # Tarball (includes SBOM/ and BUILDINFO)
          tar -czf "${{ steps.meta.outputs.tgz }}" -C "$GITHUB_WORKSPACE/dist" "${{ steps.meta.outputs.outbase }}"

          # Portable SHA256
          checksum() {
            if command -v sha256sum >/dev/null 2>&1; then
              sha256sum "$1"
            else
              shasum -a 256 "$1"
            fi
          }

          {
            checksum "${{ steps.meta.outputs.tgz }}"
            checksum "${{ steps.meta.outputs.dist_spdx }}"
            checksum "${{ steps.meta.outputs.dist_cdx }}"
          } | tee "${{ steps.meta.outputs.checksums }}"

      - name: Upload artifacts (${{ matrix.label }})
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.label }}
          path: |
            ${{ steps.meta.outputs.tgz }}
            ${{ steps.meta.outputs.dist_spdx }}
            ${{ steps.meta.outputs.dist_cdx }}
            ${{ steps.meta.outputs.checksums }}
          if-no-files-found: error
          retention-days: 14

  release:
    # Only runs for tag refs (e.g., refs/tags/v4.5.4-acme.1)
    if: startsWith(github.ref, 'refs/tags/')
    needs: [ build ]
    runs-on: ubuntu-24.04

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v5
        with:
          path: ./dist

      # Combine checksums from all matrix builds
      - name: Combine checksums
        id: checks
        run: |
          set -eu
          find dist -type f -name '*.sha256.txt' -print0 | sort -z | xargs -0 cat > dist/ALL-CHECKSUMS.sha256.txt
          echo "combined=dist/ALL-CHECKSUMS.sha256.txt" >> "$GITHUB_OUTPUT"
          wc -l dist/ALL-CHECKSUMS.sha256.txt || true

      # Install Cosign and sign all assets (keyless via OIDC)
      - name: Install Cosain
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.4.0'   # pin a version

      - name: Sign release assets with Cosign (keyless)
        env:
          COSIGN_EXPERIMENTAL: 'false'
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          files=(dist/**/yara-*.tar.gz dist/**/yara-*.sbom.*.json "${{ steps.checks.outputs.combined }}")
          for f in "${files[@]}"; do
            echo "Signing $f"
            cosign sign-blob --yes \
              --output-signature "${f}.sig" \
              --output-certificate "${f}.pem" \
              "$f"
          done

      # Build provenance attestation (ties artifacts to this build)
      - name: Attest build provenance
        uses: actions/attest-build-provenance@v3
        with:
          subject-checksums: ${{ steps.checks.outputs.combined }}

      - name: Create GitHub Release (from tag)
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/**/yara-*.tar.gz
            dist/**/yara-*.tar.gz.sig
            dist/**/yara-*.tar.gz.pem
            dist/**/yara-*.sbom.spdx.json
            dist/**/yara-*.sbom.spdx.json.sig
            dist/**/yara-*.sbom.spdx.json.pem
            dist/**/yara-*.sbom.cdx.json
            dist/**/yara-*.sbom.cdx.json.sig
            dist/**/yara-*.sbom.cdx.json.pem
            dist/**/yara-*.sha256.txt
            dist/ALL-CHECKSUMS.sha256.txt
            dist/ALL-CHECKSUMS.sha256.txt.sig
            dist/ALL-CHECKSUMS.sha256.txt.pem
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
